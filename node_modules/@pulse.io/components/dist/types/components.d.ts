/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';
import {
  CardStyles,
  Color,
  ColorVariant,
  Elevation,
  Fill,
  Position,
  StateInput,
  TextFieldTypes,
} from './interface';

export namespace Components {
  interface PulseButton {
    'color': Color;
    'colorvariant': ColorVariant;
    'disabled': boolean;
    'fill': Fill;
    'type': 'submit' | 'reset' | 'button';
  }
  interface PulseCard {
    'color': Color;
    'colorvariant': ColorVariant;
    'elevation': Elevation;
    'elevationhover': Elevation;
  }
  interface PulseCheckbox {
    'checked': boolean;
    'color': Color;
    'disabled': boolean;
    'name': string;
    'value': string;
  }
  interface PulseFabButton {
    'color': Color;
    'disabled': boolean;
    'text': string;
    'textposition': 'bottom' | 'right';
    'type': 'submit' | 'reset' | 'button';
  }
  interface PulseFlowtm {}
  interface PulseFlowtr {}
  interface PulseFlowtt {}
  interface PulseInput {
    'autocomplete': 'on' | 'off';
    'autofocus': boolean;
    'disabled': boolean;
    'label': string;
    'labelerror': string;
    'max': string;
    'maxlength': number;
    'min': string;
    'minlength': number;
    'name': string;
    'pattern': string;
    'placeholder': string;
    'readonly': boolean;
    'required': boolean;
    'spellcheck': boolean;
    'state': StateInput;
    'step': string;
    'type': TextFieldTypes;
    'value': string | null;
  }
  interface PulseRadio {
    'checked': boolean;
    'color': Color;
    'disabled': boolean;
    'label': string;
    'name': string;
    'value'?: any | null;
  }
  interface PulseRadioGroup {
    /**
    * If `true`, the radios can be deselected.
    */
    'allowEmptySelection': boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name': string;
    /**
    * the value of the radio group.
    */
    'value'?: any | null;
  }
  interface PulseSelectCard {
    'color': Color;
    'disabled': boolean;
    'selected': boolean;
    'value'?: any | null;
  }
  interface PulseSelectCardGroup {
    'allowEmptySelection': boolean;
    'groupstyle': CardStyles;
    'isScrollBegin': () => Promise<boolean>;
    'isScrollable': () => Promise<boolean>;
    'moveBackwards': () => Promise<void>;
    'moveForward': () => Promise<void>;
    'position': any;
    'value'?: any | null;
  }
  interface PulseSwitchButton {
    'changeStateSwitch': () => Promise<void>;
    'color': Color;
    'inputstate': boolean;
  }
  interface PulseTab {
    'color': Color;
    'colorvariant': ColorVariant;
    'disabled': boolean;
    'selected': boolean;
    'tabtext': string;
    'value'?: any | null;
  }
  interface PulseTabs {
    'allowEmptySelection': boolean;
    'value'?: any | null;
  }
  interface PulseTooltip {
    'color': Color;
    'colorvariant': ColorVariant;
    'description': string;
    'dismiss': () => Promise<void>;
    'elevation': Elevation;
    'objectdest': string;
    'objectdesthtml': HTMLElement;
    'position': Position;
    'recalculate': () => Promise<void>;
    'tiptitle': string;
  }
  interface PulseTooltipController {
    'dismiss': <T>(id: any) => Promise<T>;
    'present': <T>(properties: any) => Promise<T>;
  }
}

declare global {


  interface HTMLPulseButtonElement extends Components.PulseButton, HTMLStencilElement {}
  var HTMLPulseButtonElement: {
    prototype: HTMLPulseButtonElement;
    new (): HTMLPulseButtonElement;
  };

  interface HTMLPulseCardElement extends Components.PulseCard, HTMLStencilElement {}
  var HTMLPulseCardElement: {
    prototype: HTMLPulseCardElement;
    new (): HTMLPulseCardElement;
  };

  interface HTMLPulseCheckboxElement extends Components.PulseCheckbox, HTMLStencilElement {}
  var HTMLPulseCheckboxElement: {
    prototype: HTMLPulseCheckboxElement;
    new (): HTMLPulseCheckboxElement;
  };

  interface HTMLPulseFabButtonElement extends Components.PulseFabButton, HTMLStencilElement {}
  var HTMLPulseFabButtonElement: {
    prototype: HTMLPulseFabButtonElement;
    new (): HTMLPulseFabButtonElement;
  };

  interface HTMLPulseFlowtmElement extends Components.PulseFlowtm, HTMLStencilElement {}
  var HTMLPulseFlowtmElement: {
    prototype: HTMLPulseFlowtmElement;
    new (): HTMLPulseFlowtmElement;
  };

  interface HTMLPulseFlowtrElement extends Components.PulseFlowtr, HTMLStencilElement {}
  var HTMLPulseFlowtrElement: {
    prototype: HTMLPulseFlowtrElement;
    new (): HTMLPulseFlowtrElement;
  };

  interface HTMLPulseFlowttElement extends Components.PulseFlowtt, HTMLStencilElement {}
  var HTMLPulseFlowttElement: {
    prototype: HTMLPulseFlowttElement;
    new (): HTMLPulseFlowttElement;
  };

  interface HTMLPulseInputElement extends Components.PulseInput, HTMLStencilElement {}
  var HTMLPulseInputElement: {
    prototype: HTMLPulseInputElement;
    new (): HTMLPulseInputElement;
  };

  interface HTMLPulseRadioElement extends Components.PulseRadio, HTMLStencilElement {}
  var HTMLPulseRadioElement: {
    prototype: HTMLPulseRadioElement;
    new (): HTMLPulseRadioElement;
  };

  interface HTMLPulseRadioGroupElement extends Components.PulseRadioGroup, HTMLStencilElement {}
  var HTMLPulseRadioGroupElement: {
    prototype: HTMLPulseRadioGroupElement;
    new (): HTMLPulseRadioGroupElement;
  };

  interface HTMLPulseSelectCardElement extends Components.PulseSelectCard, HTMLStencilElement {}
  var HTMLPulseSelectCardElement: {
    prototype: HTMLPulseSelectCardElement;
    new (): HTMLPulseSelectCardElement;
  };

  interface HTMLPulseSelectCardGroupElement extends Components.PulseSelectCardGroup, HTMLStencilElement {}
  var HTMLPulseSelectCardGroupElement: {
    prototype: HTMLPulseSelectCardGroupElement;
    new (): HTMLPulseSelectCardGroupElement;
  };

  interface HTMLPulseSwitchButtonElement extends Components.PulseSwitchButton, HTMLStencilElement {}
  var HTMLPulseSwitchButtonElement: {
    prototype: HTMLPulseSwitchButtonElement;
    new (): HTMLPulseSwitchButtonElement;
  };

  interface HTMLPulseTabElement extends Components.PulseTab, HTMLStencilElement {}
  var HTMLPulseTabElement: {
    prototype: HTMLPulseTabElement;
    new (): HTMLPulseTabElement;
  };

  interface HTMLPulseTabsElement extends Components.PulseTabs, HTMLStencilElement {}
  var HTMLPulseTabsElement: {
    prototype: HTMLPulseTabsElement;
    new (): HTMLPulseTabsElement;
  };

  interface HTMLPulseTooltipElement extends Components.PulseTooltip, HTMLStencilElement {}
  var HTMLPulseTooltipElement: {
    prototype: HTMLPulseTooltipElement;
    new (): HTMLPulseTooltipElement;
  };

  interface HTMLPulseTooltipControllerElement extends Components.PulseTooltipController, HTMLStencilElement {}
  var HTMLPulseTooltipControllerElement: {
    prototype: HTMLPulseTooltipControllerElement;
    new (): HTMLPulseTooltipControllerElement;
  };
  interface HTMLElementTagNameMap {
    'pulse-button': HTMLPulseButtonElement;
    'pulse-card': HTMLPulseCardElement;
    'pulse-checkbox': HTMLPulseCheckboxElement;
    'pulse-fab-button': HTMLPulseFabButtonElement;
    'pulse-flowtm': HTMLPulseFlowtmElement;
    'pulse-flowtr': HTMLPulseFlowtrElement;
    'pulse-flowtt': HTMLPulseFlowttElement;
    'pulse-input': HTMLPulseInputElement;
    'pulse-radio': HTMLPulseRadioElement;
    'pulse-radio-group': HTMLPulseRadioGroupElement;
    'pulse-select-card': HTMLPulseSelectCardElement;
    'pulse-select-card-group': HTMLPulseSelectCardGroupElement;
    'pulse-switch-button': HTMLPulseSwitchButtonElement;
    'pulse-tab': HTMLPulseTabElement;
    'pulse-tabs': HTMLPulseTabsElement;
    'pulse-tooltip': HTMLPulseTooltipElement;
    'pulse-tooltip-controller': HTMLPulseTooltipControllerElement;
  }
}

declare namespace LocalJSX {
  interface PulseButton extends JSXBase.HTMLAttributes<HTMLPulseButtonElement> {
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'disabled'?: boolean;
    'fill'?: Fill;
    'onPulseBlur'?: (event: CustomEvent<any>) => void;
    'onPulseFocus'?: (event: CustomEvent<any>) => void;
    'type'?: 'submit' | 'reset' | 'button';
  }
  interface PulseCard extends JSXBase.HTMLAttributes<HTMLPulseCardElement> {
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'elevation'?: Elevation;
    'elevationhover'?: Elevation;
  }
  interface PulseCheckbox extends JSXBase.HTMLAttributes<HTMLPulseCheckboxElement> {
    'checked'?: boolean;
    'color'?: Color;
    'disabled'?: boolean;
    'name'?: string;
    'onValueEmmit'?: (event: CustomEvent<boolean>) => void;
    'value'?: string;
  }
  interface PulseFabButton extends JSXBase.HTMLAttributes<HTMLPulseFabButtonElement> {
    'color'?: Color;
    'disabled'?: boolean;
    'onFabButtonDidLoad'?: (event: CustomEvent<any>) => void;
    'onPulseBlur'?: (event: CustomEvent<any>) => void;
    'onPulseFocus'?: (event: CustomEvent<any>) => void;
    'text'?: string;
    'textposition'?: 'bottom' | 'right';
    'type'?: 'submit' | 'reset' | 'button';
  }
  interface PulseFlowtm extends JSXBase.HTMLAttributes<HTMLPulseFlowtmElement> {}
  interface PulseFlowtr extends JSXBase.HTMLAttributes<HTMLPulseFlowtrElement> {}
  interface PulseFlowtt extends JSXBase.HTMLAttributes<HTMLPulseFlowttElement> {}
  interface PulseInput extends JSXBase.HTMLAttributes<HTMLPulseInputElement> {
    'autocomplete'?: 'on' | 'off';
    'autofocus'?: boolean;
    'disabled'?: boolean;
    'label'?: string;
    'labelerror'?: string;
    'max'?: string;
    'maxlength'?: number;
    'min'?: string;
    'minlength'?: number;
    'name'?: string;
    'onInputBlur'?: (event: CustomEvent<void>) => void;
    'onInputFocus'?: (event: CustomEvent<void>) => void;
    'onIonInputDidUnload'?: (event: CustomEvent<void>) => void;
    'onKeyBoardInput'?: (event: CustomEvent<KeyboardEvent>) => void;
    'onPulseInputDidLoad'?: (event: CustomEvent<void>) => void;
    'onValueEmmitInput'?: (event: CustomEvent<string>) => void;
    'pattern'?: string;
    'placeholder'?: string;
    'readonly'?: boolean;
    'required'?: boolean;
    'spellcheck'?: boolean;
    'state'?: StateInput;
    'step'?: string;
    'type'?: TextFieldTypes;
    'value'?: string | null;
  }
  interface PulseRadio extends JSXBase.HTMLAttributes<HTMLPulseRadioElement> {
    'checked'?: boolean;
    'color'?: Color;
    'disabled'?: boolean;
    'label'?: string;
    'name'?: string;
    /**
    * Emitted when the radio button is selected.
    */
    'onRadioSelect'?: (event: CustomEvent<any>) => void;
    'onValueEmmit'?: (event: CustomEvent<boolean>) => void;
    'value'?: any | null;
  }
  interface PulseRadioGroup extends JSXBase.HTMLAttributes<HTMLPulseRadioGroupElement> {
    /**
    * If `true`, the radios can be deselected.
    */
    'allowEmptySelection'?: boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    /**
    * Emitted when the value has changed.
    */
    'onRadioChange'?: (event: CustomEvent<any>) => void;
    /**
    * the value of the radio group.
    */
    'value'?: any | null;
  }
  interface PulseSelectCard extends JSXBase.HTMLAttributes<HTMLPulseSelectCardElement> {
    'color'?: Color;
    'disabled'?: boolean;
    /**
    * Emitted when the select card is selected.
    */
    'onSCardSelect'?: (event: CustomEvent<any>) => void;
    'selected'?: boolean;
    'value'?: any | null;
  }
  interface PulseSelectCardGroup extends JSXBase.HTMLAttributes<HTMLPulseSelectCardGroupElement> {
    'allowEmptySelection'?: boolean;
    'groupstyle'?: CardStyles;
    'onCardChange'?: (event: CustomEvent<any>) => void;
    'onPulseScroll'?: (event: CustomEvent<any>) => void;
    'onPulseScrollEnd'?: (event: CustomEvent<any>) => void;
    'onPulseScrollZero'?: (event: CustomEvent<any>) => void;
    'position'?: any;
    'value'?: any | null;
  }
  interface PulseSwitchButton extends JSXBase.HTMLAttributes<HTMLPulseSwitchButtonElement> {
    'color'?: Color;
    'inputstate'?: boolean;
    'onOnSwitchChange'?: (event: CustomEvent<boolean>) => void;
  }
  interface PulseTab extends JSXBase.HTMLAttributes<HTMLPulseTabElement> {
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'disabled'?: boolean;
    /**
    * Emitted when the select card is selected.
    */
    'onTabSelect'?: (event: CustomEvent<any>) => void;
    'selected'?: boolean;
    'tabtext'?: string;
    'value'?: any | null;
  }
  interface PulseTabs extends JSXBase.HTMLAttributes<HTMLPulseTabsElement> {
    'allowEmptySelection'?: boolean;
    'onTabChange'?: (event: CustomEvent<any>) => void;
    'value'?: any | null;
  }
  interface PulseTooltip extends JSXBase.HTMLAttributes<HTMLPulseTooltipElement> {
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'description'?: string;
    'elevation'?: Elevation;
    'objectdest'?: string;
    'objectdesthtml'?: HTMLElement;
    'onOnCloseChange'?: (event: CustomEvent<boolean>) => void;
    'position'?: Position;
    'tiptitle'?: string;
  }
  interface PulseTooltipController extends JSXBase.HTMLAttributes<HTMLPulseTooltipControllerElement> {}

  interface IntrinsicElements {
    'pulse-button': PulseButton;
    'pulse-card': PulseCard;
    'pulse-checkbox': PulseCheckbox;
    'pulse-fab-button': PulseFabButton;
    'pulse-flowtm': PulseFlowtm;
    'pulse-flowtr': PulseFlowtr;
    'pulse-flowtt': PulseFlowtt;
    'pulse-input': PulseInput;
    'pulse-radio': PulseRadio;
    'pulse-radio-group': PulseRadioGroup;
    'pulse-select-card': PulseSelectCard;
    'pulse-select-card-group': PulseSelectCardGroup;
    'pulse-switch-button': PulseSwitchButton;
    'pulse-tab': PulseTab;
    'pulse-tabs': PulseTabs;
    'pulse-tooltip': PulseTooltip;
    'pulse-tooltip-controller': PulseTooltipController;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


