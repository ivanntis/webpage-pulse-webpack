import { h } from '@stencil/core';
export class PulseSelectCardGroup {
    constructor() {
        this.inputId = `pulse-scg-${selectCardGroupIds++}`;
        this.labelId = `${this.inputId}-lbl`;
        this.selectCards = [];
        this.allowEmptySelection = false;
        this.groupstyle = 'buttons';
        this.backButtonFade = {
            hidden: ''
        };
        this.forwardButtonFade = {
            hidden: ''
        };
        this.sliderLoaded = false;
        this.next = () => {
            this.slider.scrollLeft = this.slider.scrollLeft + this.slideSize;
        };
        this.previous = () => {
            this.slider.scrollLeft = this.slider.scrollLeft - this.slideSize;
        };
        this.scrollEvent = () => {
            const scrollLeft = this.slider.scrollLeft;
            const scrollMax = (this.slider.scrollWidth - this.slider.clientWidth);
            this.pulseScroll.emit(scrollLeft);
            if (scrollLeft === 0) {
                this.pulseScrollZero.emit();
                this.backButtonFade = {
                    hidden: 'zoomOut'
                };
            }
            else if (scrollLeft >= scrollMax) {
                this.pulseScrollEnd.emit();
                this.forwardButtonFade = {
                    hidden: 'zoomOut'
                };
            }
            else {
                this.backButton.style.display = "inline-block";
                this.forwardButton.style.display = "block";
                this.backButtonFade = {
                    hidden: 'zoomIn'
                };
                this.forwardButtonFade = {
                    hidden: 'zoomIn'
                };
            }
        };
    }
    valueChanged(value) {
        this.updateCards();
        this.cardChange.emit({ value });
    }
    positionChange(value) {
        if (!!this.slider) {
            this.slider.scrollLeft = value;
        }
        return;
    }
    async isScrollBegin() {
        return Promise.resolve(this.slider.scrollLeft === 0);
    }
    async isScrollable() {
        return Promise.resolve(this.slider.scrollWidth > this.slider.offsetWidth);
    }
    async moveForward() {
        this.next();
    }
    async moveBackwards() {
        this.previous();
    }
    onSelectCardDidLoad(ev) {
        const card = ev.target;
        this.slideSize = card.offsetWidth;
        this.selectCards.push(card);
        if (this.value == null && card.selected) {
            this.value = card.value;
        }
        else {
            this.updateCards();
        }
    }
    onSelectCardDidUnload(ev) {
        const index = this.selectCards.indexOf(ev.target);
        if (index > -1) {
            this.selectCards.splice(index, 1);
        }
    }
    onCardSelect(ev) {
        const selectedCard = ev.target;
        if (selectedCard) {
            selectedCard.selected = true;
            this.value = selectedCard.value;
        }
    }
    onCardDeselect(ev) {
        if (this.allowEmptySelection) {
            const selectedCard = ev.target;
            if (selectedCard) {
                selectedCard.selected = false;
                this.value = undefined;
            }
        }
    }
    onFabButtonDidLoad(ev) {
        const target = ev.detail;
        this.stateScrollActions(target);
    }
    handleResize() {
        this.sliderLoaded = !this.sliderLoaded;
    }
    componentDidLoad() {
        if (!!this.slider) {
            this.sliderLoaded = !this.sliderLoaded;
        }
        setTimeout(() => {
            this.positionChange(this.position);
        }, 50);
    }
    stateScrollActions(el) {
        this.forwardButtonFade = {
            hidden: 'zoomIn'
        };
        this.slider.addEventListener('animationend', (e) => {
            this.hideActions(e, el);
        });
    }
    hideActions(e, el) {
        if (e.animationName === 'zoomOut') {
            el.style.display = "none";
        }
    }
    updateCards() {
        const value = this.value;
        let hasSelected = false;
        this.selectCards.forEach((e) => {
            if (!hasSelected && e.value === value) {
                hasSelected = true;
                e.selected = true;
            }
            else {
                e.selected = false;
            }
        });
    }
    hostData() {
        return {
            'aria-labelledby': this.labelId,
            class: {
                'grid-select': this.groupstyle === 'buttons',
                'tabs-select': this.groupstyle === 'tabs'
            }
        };
    }
    showButtonBack() {
        if (!!this.slider) {
            return (this.slider.scrollWidth > this.slider.offsetWidth) &&
                h("pulse-fab-button", { id: "back-button", ref: el => this.backButton = el, style: { display: 'none' }, class: `animated slide-wrapper__actions-layer__back ${this.backButtonFade.hidden}`, onClick: this.previous },
                    h("svg", { xmlns: 'http://www.w3.org/2000/svg', width: '16', height: '16', viewBox: '0 0 16 16' },
                        h("path", { "fill-rule": 'nonzero', d: 'M15 7H3.83l4.88-4.88c.39-.39.39-1.03 0-1.42A.996.996 0 0 0 7.3.7L.71 7.29a.996.996 0 0 0 0 1.41l6.59 6.59a.996.996 0 1 0 1.41-1.41L3.83 9H15c.55 0 1-.45 1-1s-.45-1-1-1z' })));
        }
        return undefined;
    }
    showForwardButton() {
        if (!!this.slider) {
            return (this.slider.scrollWidth > this.slider.offsetWidth) &&
                h("pulse-fab-button", { id: "forward-button", ref: el => this.forwardButton = el, class: `animated slide-wrapper__actions-layer__forward ${this.forwardButtonFade.hidden}`, onClick: this.next },
                    h("svg", { xmlns: 'http://www.w3.org/2000/svg', width: '16', height: '16', viewBox: '0 0 16 16' },
                        h("path", { "fill-rule": 'nonzero', d: 'M1 9h11.17l-4.88 4.88c-.39.39-.39 1.03 0 1.42.39.39 1.02.39 1.41 0l6.59-6.59a.996.996 0 0 0 0-1.41L8.71.7A.996.996 0 1 0 7.3 2.11L12.17 7H1c-.55 0-1 .45-1 1s.45 1 1 1z' })));
        }
        return undefined;
    }
    render() {
        return (h("div", { class: "slide-wrapper" },
            h("div", { class: "slide-wrapper__actions-layer" },
                this.showButtonBack(),
                this.showForwardButton()),
            h("div", { class: "slide-wrapper__slide", ref: el => this.slider = el, onScroll: this.scrollEvent },
                h("slot", null))));
    }
    static get is() { return "pulse-select-card-group"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["pulse-select-card-group.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["pulse-select-card-group.css"]
    }; }
    static get properties() { return {
        "allowEmptySelection": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "allow-empty-selection",
            "reflect": false,
            "defaultValue": "false"
        },
        "groupstyle": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "CardStyles",
                "resolved": "\"buttons\" | \"tabs\"",
                "references": {
                    "CardStyles": {
                        "location": "import",
                        "path": "../../../interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "groupstyle",
            "reflect": false,
            "defaultValue": "'buttons'"
        },
        "value": {
            "type": "any",
            "mutable": true,
            "complexType": {
                "original": "any | null",
                "resolved": "any",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "value",
            "reflect": false
        },
        "position": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "position",
            "reflect": false
        }
    }; }
    static get states() { return {
        "backButtonFade": {},
        "forwardButtonFade": {},
        "sliderLoaded": {}
    }; }
    static get events() { return [{
            "method": "cardChange",
            "name": "cardChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "pulseScroll",
            "name": "pulseScroll",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "pulseScrollEnd",
            "name": "pulseScrollEnd",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "pulseScrollZero",
            "name": "pulseScrollZero",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "isScrollBegin": {
            "complexType": {
                "signature": "() => Promise<boolean>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<boolean>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "isScrollable": {
            "complexType": {
                "signature": "() => Promise<boolean>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<boolean>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "moveForward": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "moveBackwards": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
    static get watchers() { return [{
            "propName": "value",
            "methodName": "valueChanged"
        }, {
            "propName": "position",
            "methodName": "positionChange"
        }]; }
    static get listeners() { return [{
            "name": "sCardDidLoad",
            "method": "onSelectCardDidLoad",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "sCardDidUnload",
            "method": "onSelectCardDidUnload",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "sCardSelect",
            "method": "onCardSelect",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "sCardDeselect",
            "method": "onCardDeselect",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "fabButtonDidLoad",
            "method": "onFabButtonDidLoad",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "resize",
            "method": "handleResize",
            "target": "window",
            "capture": false,
            "passive": true
        }]; }
}
let selectCardGroupIds = 0;
