import { h, Host } from '@stencil/core';
export class PulseInput {
    constructor() {
        this.inputId = `pulse-input-${inputIds++}`;
        this.hasFocus = false;
        this.labelerror = 'Error';
        this.name = this.inputId;
        this.disabled = false;
        this.type = 'text';
        this.autofocus = false;
        this.autocomplete = 'off';
        this.readonly = false;
        this.spellcheck = false;
        this.required = false;
        this.state = 'basic';
        this.value = '';
        this.onBlur = () => {
            this.hasFocus = false;
            this.inputBlur.emit();
        };
        this.onFocus = () => {
            this.hasFocus = true;
            this.inputFocus.emit();
        };
    }
    componentDidLoad() {
        this.pulseInputDidLoad.emit();
    }
    componentDidUnload() {
        this.ionInputDidUnload.emit();
    }
    valueChanged() {
        const input = this.el.querySelector('input');
        input.value !== this.value && (input.value = this.value);
        this.valueEmmitInput.emit(this.value);
    }
    handleInput(event) {
        const input = event.target;
        input && (this.value = input.value);
        this.keyBoardInput.emit(event);
    }
    render() {
        return (h(Host, { class: {
                [`input-${this.state}`]: true,
                [`input-disable-cursor`]: this.disabled
            } },
            h("div", null,
                this.label && h("label", { class: 'infoLabel' }, this.label),
                h("input", { class: 'input-native', type: this.type, placeholder: this.placeholder, value: this.value, disabled: this.disabled, min: this.min, max: this.max, minlength: this.minlength, maxlength: this.maxlength, autoFocus: this.autofocus, autoComplete: this.autocomplete, readOnly: this.readonly, step: this.step, spellCheck: this.spellcheck, pattern: this.pattern, required: this.required, name: this.name, onInput: event => {
                        this.handleInput(event);
                    }, onBlur: this.onBlur, onFocus: this.onFocus }),
                h("div", { class: 'icon' }, this.state === 'success' ? (h("svg", { xmlns: 'http://www.w3.org/2000/svg', width: '20', height: '20', viewBox: '0 0 20 20' },
                    h("g", { fill: 'none', "fill-rule": 'evenodd' },
                        h("path", { d: 'M-2-2h24v24H-2z' }),
                        h("path", { fill: '#7AD468', "fill-rule": 'nonzero', d: 'M10 0C4.48 0 0 4.48 0 10s4.48 10 10 10 10-4.48 10-10S15.52 0 10 0zM7.29 14.29L3.7 10.7a.996.996 0 1 1 1.41-1.41L8 12.17l6.88-6.88a.996.996 0 1 1 1.41 1.41L8.7 14.29a.996.996 0 0 1-1.41 0z' })))) : (this.state === 'warn' && (h("svg", { xmlns: 'http://www.w3.org/2000/svg', width: '20', height: '17', viewBox: '0 0 20 17' },
                    h("g", { fill: 'none', "fill-rule": 'evenodd' },
                        h("path", { d: 'M22 20H-2V-4h24z', opacity: '.87' }),
                        h("path", { fill: '#F69B31', "fill-rule": 'nonzero', d: 'M2.47 17h15.06c1.54 0 2.5-1.67 1.73-3L11.73.99c-.77-1.33-2.69-1.33-3.46 0L.74 14c-.77 1.33.19 3 1.73 3zM10 10c-.55 0-1-.45-1-1V7c0-.55.45-1 1-1s1 .45 1 1v2c0 .55-.45 1-1 1zm1 4H9v-2h2v2z' })))))),
                this.state === 'error' && !this.disabled && (h("label", { class: 'errorLabel' }, this.labelerror)))));
    }
    static get is() { return "pulse-input"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() { return {
        "$": ["pulse-input.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["pulse-input.css"]
    }; }
    static get properties() { return {
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "label",
            "reflect": false
        },
        "labelerror": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "labelerror",
            "reflect": false,
            "defaultValue": "'Error'"
        },
        "name": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "name",
            "reflect": false,
            "defaultValue": "this.inputId"
        },
        "pattern": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "pattern",
            "reflect": false
        },
        "min": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "min",
            "reflect": false
        },
        "max": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "max",
            "reflect": false
        },
        "minlength": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "minlength",
            "reflect": false
        },
        "maxlength": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "maxlength",
            "reflect": false
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "placeholder": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "placeholder",
            "reflect": false
        },
        "type": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "TextFieldTypes",
                "resolved": "\"date\" | \"email\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"time\" | \"url\"",
                "references": {
                    "TextFieldTypes": {
                        "location": "import",
                        "path": "../../../interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "type",
            "reflect": false,
            "defaultValue": "'text'"
        },
        "autofocus": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "autofocus",
            "reflect": false,
            "defaultValue": "false"
        },
        "autocomplete": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'on' | 'off'",
                "resolved": "\"off\" | \"on\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "autocomplete",
            "reflect": false,
            "defaultValue": "'off'"
        },
        "readonly": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "readonly",
            "reflect": false,
            "defaultValue": "false"
        },
        "step": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "step",
            "reflect": false
        },
        "spellcheck": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "spellcheck",
            "reflect": false,
            "defaultValue": "false"
        },
        "required": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "required",
            "reflect": false,
            "defaultValue": "false"
        },
        "state": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "StateInput",
                "resolved": "\"basic\" | \"error\" | \"success\" | \"warn\"",
                "references": {
                    "StateInput": {
                        "location": "import",
                        "path": "../../../interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "state",
            "reflect": true,
            "defaultValue": "'basic'"
        },
        "value": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "string | null",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "value",
            "reflect": false,
            "defaultValue": "''"
        }
    }; }
    static get states() { return {
        "hasFocus": {}
    }; }
    static get events() { return [{
            "method": "keyBoardInput",
            "name": "keyBoardInput",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "KeyboardEvent",
                "resolved": "KeyboardEvent",
                "references": {
                    "KeyboardEvent": {
                        "location": "global"
                    }
                }
            }
        }, {
            "method": "valueEmmitInput",
            "name": "valueEmmitInput",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            }
        }, {
            "method": "inputFocus",
            "name": "inputFocus",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "pulseInputDidLoad",
            "name": "pulseInputDidLoad",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "ionInputDidUnload",
            "name": "ionInputDidUnload",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "inputBlur",
            "name": "inputBlur",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get watchers() { return [{
            "propName": "value",
            "methodName": "valueChanged"
        }]; }
}
let inputIds = 0;
