import { h } from '@stencil/core';
import { createColorClasses } from '../../../utils/themes';
export class PulseSelectCard {
    constructor() {
        this.inputId = `pulse-sc-${selectCardIds++}`;
        this.disabled = false;
        this.selected = false;
        this.onClick = () => {
            if (this.selected) {
                this.sCardDeselect.emit();
            }
            else {
                this.selected = true;
            }
        };
    }
    selectChanged(isSelected) {
        if (isSelected) {
            this.sCardSelect.emit({
                selected: true,
                value: this.value
            });
        }
    }
    componentDidLoad() {
        if (this.selected) {
            this.selectChanged(this.selected);
        }
        this.sCardDidLoad.emit();
    }
    componentDidUnload() {
        this.sCardDidUnload.emit();
    }
    componentWillLoad() {
        if (this.value === undefined) {
            this.value = this.inputId;
        }
    }
    hostData() {
        const { disabled, color } = this;
        return {
            class: Object.assign({}, createColorClasses(color), { 'button-disabled': disabled, 'pulse-focusable': true, 'pulse-padding-m-xs-h': true, 'pulse-padding-xs-xs-v': true, 'btn-select--selected': this.selected })
        };
    }
    render() {
        return (h("div", { class: 'btn-select pulse-padding-l-xs-h pulse-padding-xs-xs-v', onClick: this.onClick },
            h("slot", null)));
    }
    static get is() { return "pulse-select-card"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["pulse-select-card.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["pulse-select-card.css"]
    }; }
    static get properties() { return {
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Color",
                "resolved": "\"error\" | \"pgray\" | \"primary\" | \"success\" | \"warn\"",
                "references": {
                    "Color": {
                        "location": "import",
                        "path": "../../../interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "color",
            "reflect": false
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "disabled",
            "reflect": true,
            "defaultValue": "false"
        },
        "value": {
            "type": "any",
            "mutable": true,
            "complexType": {
                "original": "any | null",
                "resolved": "any",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "value",
            "reflect": true
        },
        "selected": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "selected",
            "reflect": true,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "sCardSelect",
            "name": "sCardSelect",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the select card is selected."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "sCardDeselect",
            "name": "sCardDeselect",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [{
                        "text": undefined,
                        "name": "internal"
                    }],
                "text": "Emitted when selected select card is selected."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "sCardDidLoad",
            "name": "sCardDidLoad",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [{
                        "text": undefined,
                        "name": "internal"
                    }],
                "text": "Emitted when the radio loads."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }, {
            "method": "sCardDidUnload",
            "name": "sCardDidUnload",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [{
                        "text": undefined,
                        "name": "internal"
                    }],
                "text": "Emitted when the radio unloads."
            },
            "complexType": {
                "original": "void",
                "resolved": "void",
                "references": {}
            }
        }]; }
    static get watchers() { return [{
            "propName": "selected",
            "methodName": "selectChanged"
        }]; }
}
let selectCardIds = 0;
