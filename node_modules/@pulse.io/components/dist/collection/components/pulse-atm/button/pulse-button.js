import { h } from '@stencil/core';
import { hasShadowDom } from '../../../utils/utils';
import { createColorClasses } from '../../../utils/themes';
export class PulseButton {
    constructor() {
        this.color = 'primary';
        this.fill = 'solid';
        this.disabled = false;
        this.type = 'button';
        this.colorvariant = 'base';
        this.onFocus = () => {
            this.pulseFocus.emit();
        };
        this.onBlur = () => {
            this.pulseBlur.emit();
        };
    }
    onClick(ev) {
        if (hasShadowDom(this.el)) {
            //Busca si hay un padre que contiene el elemento aislado por el shadowDom
            const form = this.el.closest('form');
            if (form) {
                ev.preventDefault();
                const virtualButton = document.createElement('button');
                virtualButton.type = this.type;
                virtualButton.style.display = 'none';
                form.appendChild(virtualButton);
                virtualButton.click();
                virtualButton.remove();
            }
        }
    }
    hostData() {
        const { disabled, color, fill, colorvariant } = this;
        return {
            'aria-disabled': disabled ? 'true' : null,
            class: Object.assign({}, createColorClasses(color, colorvariant), { button: true, [`button-${fill}`]: true, 'button-disabled': disabled, 'pulse-focusable': true })
        };
    }
    render() {
        const attrs = { type: this.type };
        return (h("button", Object.assign({}, attrs, { class: 'button-native', onFocus: this.onFocus, onBlur: this.onBlur }),
            h("slot", null)));
    }
    static get is() { return "pulse-button"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["pulse-button.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["pulse-button.css"]
    }; }
    static get properties() { return {
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Color",
                "resolved": "\"error\" | \"pgray\" | \"primary\" | \"success\" | \"warn\"",
                "references": {
                    "Color": {
                        "location": "import",
                        "path": "../../../interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "color",
            "reflect": false,
            "defaultValue": "'primary'"
        },
        "fill": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Fill",
                "resolved": "\"clear\" | \"outline\" | \"solid\"",
                "references": {
                    "Fill": {
                        "location": "import",
                        "path": "../../../interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "fill",
            "reflect": true,
            "defaultValue": "'solid'"
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "disabled",
            "reflect": true,
            "defaultValue": "false"
        },
        "type": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "'submit' | 'reset' | 'button'",
                "resolved": "\"button\" | \"reset\" | \"submit\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "type",
            "reflect": false,
            "defaultValue": "'button'"
        },
        "colorvariant": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "ColorVariant",
                "resolved": "\"base\" | \"dark\" | \"grad\" | \"shade\" | \"tint\"",
                "references": {
                    "ColorVariant": {
                        "location": "import",
                        "path": "../../../interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "colorvariant",
            "reflect": false,
            "defaultValue": "'base'"
        }
    }; }
    static get events() { return [{
            "method": "pulseFocus",
            "name": "pulseFocus",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "pulseBlur",
            "name": "pulseBlur",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "el"; }
    static get listeners() { return [{
            "name": "click",
            "method": "onClick",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
