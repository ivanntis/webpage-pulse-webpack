/** * @author <a href="mailto:ivan.pena@avaldigitallabs.com">ivanntis</a> */
import { h } from "@stencil/core";
import { createColorClasses } from '../../../utils/themes';
export class PulseTooltip {
    constructor() {
        this.elevation = 8;
        this.colorvariant = 'tint';
        this.position = 'left-start';
        this.closeEffect = {
            isClose: ''
        };
        this.closeTooltip = () => {
            this.onCloseChange.emit();
            this.closeEffect = { isClose: 'zoomOut' };
        };
    }
    resizeWindow() {
        this.recalculate();
    }
    scrollWindow() {
        this.recalculate();
    }
    async recalculate() {
        const rect = this.objectdesthtml.getBoundingClientRect();
        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const salida = { top: rect.top + scrollTop, left: rect.left + scrollLeft };
        const leftFinal = salida.left + this.checkArrowPosition(this.position).left;
        const topFinal = salida.top + this.checkArrowPosition(this.position).top;
        this.elHost.style.top = `${(topFinal)}px`;
        this.elHost.style.left = `${(leftFinal)}px`;
    }
    checkArrowPosition(position) {
        switch (position) {
            case 'left-start': {
                return {
                    left: this.objectdesthtml.clientWidth + 5,
                    top: this.objectdesthtml.clientHeight - this.objectdesthtml.clientHeight / 2 - 20
                };
            }
            case 'left-end': {
                return {
                    left: this.objectdesthtml.clientWidth + 5,
                    top: (this.elHost.clientHeight * -1) + this.objectdesthtml.clientHeight / 2 + 20
                };
            }
            case 'left-middle': {
                return {
                    left: this.objectdesthtml.clientWidth + 5,
                    top: ((this.elHost.clientHeight / 2 - this.objectdesthtml.clientHeight / 2) * -1)
                };
            }
            case 'right-start': {
                return {
                    left: (this.elHost.clientWidth + 15) * -1,
                    top: this.objectdesthtml.clientHeight - this.objectdesthtml.clientHeight / 2 - 20
                };
            }
            case 'right-end': {
                return {
                    left: (this.elHost.clientWidth + 15) * -1,
                    top: (this.elHost.clientHeight * -1) + this.objectdesthtml.clientHeight / 2 + 20
                };
            }
            case 'right-middle': {
                return {
                    left: (this.elHost.clientWidth + 15) * -1,
                    top: ((this.elHost.clientHeight / 2 - this.objectdesthtml.clientHeight / 2) * -1)
                };
            }
            case 'top-middle': {
                return {
                    left: ((this.elHost.clientWidth / 2) * -1) + this.objectdesthtml.clientWidth / 2,
                    top: (this.objectdesthtml.clientHeight)
                };
            }
            case 'top-start': {
                return {
                    left: this.objectdesthtml.clientWidth / 2 - 36,
                    top: this.objectdesthtml.clientHeight
                };
            }
            case 'top-end': {
                return {
                    left: (this.elHost.clientWidth * -1) + this.objectdesthtml.clientWidth / 2 + 36,
                    top: this.objectdesthtml.clientHeight
                };
            }
            case 'bottom-middle': {
                return {
                    left: ((this.elHost.clientWidth / 2) * -1) + this.objectdesthtml.clientWidth / 2,
                    top: (this.elHost.clientHeight + 5) * -1
                };
            }
            case 'bottom-start': {
                return {
                    left: this.objectdesthtml.clientWidth / 2 - 36,
                    top: (this.elHost.clientHeight + 5) * -1
                };
            }
            case 'bottom-end': {
                return {
                    left: (this.elHost.clientWidth * -1) + this.objectdesthtml.clientWidth / 2 + 36,
                    top: (this.elHost.clientHeight + 5) * -1
                };
            }
        }
    }
    componentDidLoad() {
        this.recalculate();
        this.closeEffect = { isClose: 'zoomIn' };
        this.tooltipmain.addEventListener("animationend", (e) => {
            if (e.animationName === 'zoomOut') {
                this.elHost.parentNode.removeChild(this.elHost);
            }
        }, false);
    }
    hostData() {
        return {
            class: Object.assign({}, createColorClasses(this.color, this.colorvariant), { [`position-ind-${this.position}`]: true })
        };
    }
    async dismiss() {
        this.closeTooltip();
    }
    render() {
        const shadown = !!this.elevation ? `pulse-elevation-${this.elevation}` : '';
        return (h("div", { class: `tooltip_main pulse-padding-l-xs-h pulse-padding-m-xs-v animated  ${shadown} ${this.closeEffect.isClose}`, ref: el => this.tooltipmain = el },
            h("div", { onClick: this.closeTooltip, class: "tooltip_main__close pulse-margin-m-xs-a" },
                h("svg", { xmlns: "http://www.w3.org/2000/svg", width: "15", height: "14", viewBox: "0 0 15 14" },
                    h("path", { fill: "#FFF", "fill-rule": "nonzero", d: "M13.81.71a.993.993 0 0 0-1.407 0L7.521 5.59 2.639.7A.997.997 0 0 0 1.23 2.11L6.113 7l-4.882 4.89a.997.997 0 0 0 1.408 1.41L7.52 8.41l4.882 4.89a.997.997 0 0 0 1.408-1.41L8.929 7l4.882-4.89c.38-.38.38-1.02 0-1.4z" }))),
            h("h4", { class: "tooltip_main__title pulse-margin-s-xs-v" }, this.tiptitle),
            !!this.description &&
                h("p", { class: "tooltip_main__desc pulse-margin-s-xs-v" }, this.description)));
    }
    static get is() { return "pulse-tooltip"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["pulse-tooltip.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["pulse-tooltip.css"]
    }; }
    static get properties() { return {
        "elevation": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "Elevation",
                "resolved": "0 | 16 | 2 | 24 | 4 | 8",
                "references": {
                    "Elevation": {
                        "location": "import",
                        "path": "../../../interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "elevation",
            "reflect": false,
            "defaultValue": "8"
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Color",
                "resolved": "\"error\" | \"pgray\" | \"primary\" | \"success\" | \"warn\"",
                "references": {
                    "Color": {
                        "location": "import",
                        "path": "../../../interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "color",
            "reflect": false
        },
        "colorvariant": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "ColorVariant",
                "resolved": "\"base\" | \"dark\" | \"grad\" | \"shade\" | \"tint\"",
                "references": {
                    "ColorVariant": {
                        "location": "import",
                        "path": "../../../interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "colorvariant",
            "reflect": false,
            "defaultValue": "'tint'"
        },
        "tiptitle": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "tiptitle",
            "reflect": false
        },
        "description": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "description",
            "reflect": false
        },
        "position": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Position",
                "resolved": "\"bottom-end\" | \"bottom-middle\" | \"bottom-start\" | \"left-end\" | \"left-middle\" | \"left-start\" | \"right-end\" | \"right-middle\" | \"right-start\" | \"top-end\" | \"top-middle\" | \"top-start\"",
                "references": {
                    "Position": {
                        "location": "import",
                        "path": "../../../interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "position",
            "reflect": false,
            "defaultValue": "'left-start'"
        },
        "objectdest": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "objectdest",
            "reflect": false
        },
        "objectdesthtml": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "HTMLElement",
                "resolved": "HTMLElement",
                "references": {
                    "HTMLElement": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get states() { return {
        "closeEffect": {}
    }; }
    static get events() { return [{
            "method": "onCloseChange",
            "name": "onCloseChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "recalculate": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "dismiss": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "elHost"; }
    static get listeners() { return [{
            "name": "resize",
            "method": "resizeWindow",
            "target": "window",
            "capture": false,
            "passive": true
        }, {
            "name": "scroll",
            "method": "scrollWindow",
            "target": "window",
            "capture": false,
            "passive": true
        }]; }
}
/*



*/ 
