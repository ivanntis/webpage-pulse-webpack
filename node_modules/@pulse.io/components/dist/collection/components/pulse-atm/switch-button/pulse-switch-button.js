/** * @author <a href="mailto:juan.gonzalez@avaldigitallabs.com">barto</a> */
import { h } from "@stencil/core";
import { createColorClasses } from "../../../utils/themes";
/**
 * Componente para un switch button
 */
export class PulseSwitchButton {
    constructor() {
        this.baseClassName = 'switch-container';
        this.trackClassName = `${this.baseClassName}__track`;
        this.thumbClassName = `${this.baseClassName}__thumb pulse-padding-s-xs-a`;
        this.inputstate = false;
        this.toggleSwitch = () => {
            this.inputstate = !this.inputstate;
            this.updateSwitchClass(this.inputstate);
            this.onSwitchChange.emit(this.inputstate);
        };
    }
    async changeStateSwitch() {
        this.toggleSwitch();
    }
    updateSwitchClass(newValue) {
        if (newValue) {
            this.trackClassName += ` ${this.baseClassName}__track--active`;
            this.thumbClassName += ` ${this.baseClassName}__thumb--active`;
        }
        else {
            this.trackClassName = `${this.baseClassName}__track`;
            this.thumbClassName = `${this.baseClassName}__thumb pulse-padding-s-xs-a`;
        }
    }
    hostData() {
        const { color } = this;
        return {
            class: Object.assign({}, createColorClasses(color))
        };
    }
    render() {
        this.updateSwitchClass(this.inputstate);
        return (h("div", { class: "switch-container", onClick: this.toggleSwitch },
            h("div", { class: this.trackClassName }),
            h("div", { class: this.thumbClassName },
                h("slot", null))));
    }
    static get is() { return "pulse-switch-button"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["pulse-switch-button.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["pulse-switch-button.css"]
    }; }
    static get properties() { return {
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "Color",
                "resolved": "\"error\" | \"pgray\" | \"primary\" | \"success\" | \"warn\"",
                "references": {
                    "Color": {
                        "location": "import",
                        "path": "../../../interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "color",
            "reflect": false
        },
        "inputstate": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "inputstate",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "onSwitchChange",
            "name": "onSwitchChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "changeStateSwitch": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
}
